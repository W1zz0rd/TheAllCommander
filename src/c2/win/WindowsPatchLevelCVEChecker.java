package c2.win;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;

public class WindowsPatchLevelCVEChecker {

	private static List<String> CVES = new ArrayList<>();
	private static Map<String, Map<Integer, int[]>> CVES_TO_KBS = new HashMap<>();

	static {
		String CVE_2019_0836 = "CVE-2019-0836";
		int[] kbs10240 = new int[] { 4493475, 4498375, 4499154, 4505051, 4503291, 4507458, 4512497, 4517276, 4522009,
				4520011, 4524153, 4525232, 4530681, 4534306, 4537776, 4540693, 4550930, 4556826, 4561649, 4567518,
				4565513, 4571692, 4577049 };
		int[] kbs14393 = new int[] { 4493470, 4499418, 4494440, 4534271, 4534307, 4537764, 4537806, 4540670, 4541329,
				4550929, 4550947, 4556813, 4561616, 4567517, 4565511, 4571694, 4577015 };
		int[] kbs15063 = new int[] { 4493474, 4493436, 4499162, 4499181, 4502112, 4505055, 4503279, 4503289, 4509476,
				4507450, 4507467, 4512474, 4512507, 4516059, 4516068, 4522011, 4520010, 4524151, 4525245, 4530711,
				4534296, 4537765, 4540705, 4550939, 4556804, 4561605, 4567516, 4565499, 4571689, 4577021 };
		int[] kbs16299 = new int[] { 4493441, 4493440, 4499147, 4499179, 4505062, 4503281, 4503284, 4509477, 4507455,
				4507465, 4512494, 4512516, 4516066, 4522012, 4520004, 4520006, 4524150, 4525241, 4530714, 4534276,
				4534318, 4537789, 4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602, 4567515, 4565508,
				4571741, 4577041 };
		int[] kbs17134 = new int[] { 4493464, 4493437, 4499167, 4499183, 4505064, 4503286, 4503288, 4509478, 4507435,
				4507466, 4512501, 4512509, 4516045, 4516058, 4522014, 4519978, 4520008, 4524149, 4525237, 4530717,
				4534293, 4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944, 4556807, 4561621,
				4567514, 4565489, 4571709, 4577032 };
		int[] kbs17763 = new int[] { 4493509, 4495667, 4494441, 4497934, 4501835, 4505056, 4501371, 4503327, 4509479,
				4505658, 4507469, 4511553, 4512534, 4512578, 4522015, 4519338, 4520062, 4524148, 4523205, 4530715,
				4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853, 4561608,
				4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		Map<Integer, int[]> mapCVE_2019_0836 = new HashMap<>();
		mapCVE_2019_0836.put(10240, kbs10240);
		mapCVE_2019_0836.put(14393, kbs14393);
		mapCVE_2019_0836.put(15063, kbs15063);
		mapCVE_2019_0836.put(16299, kbs16299);
		mapCVE_2019_0836.put(17134, kbs17134);
		mapCVE_2019_0836.put(17763, kbs17763);
		CVES.add(CVE_2019_0836);
		CVES_TO_KBS.put(CVE_2019_0836, mapCVE_2019_0836);

		String CVE_2019_0841 = "CVE-2019-0841";
		kbs15063 = new int[] { 4493474, 4493436, 4499162, 4499181, 4502112, 4505055, 4503279, 4503289, 4509476, 4507450,
				4507467, 4512474, 4512507, 4516059, 4516068, 4522011, 4520010, 4524151, 4525245, 4530711, 4534296,
				4537765, 4540705, 4550939, 4556804, 4561605, 4567516, 4565499, 4571689, 4577021 };
		kbs16299 = new int[] { 4493441, 4493440, 4499147, 4499179, 4505062, 4503281, 4503284, 4509477, 4507455, 4507465,
				4512494, 4512516, 4516066, 4522012, 4520004, 4520006, 4524150, 4525241, 4530714, 4534276, 4534318,
				4537789, 4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602, 4567515, 4565508, 4571741,
				4577041 };
		kbs17134 = new int[] { 4493464, 4493437, 4499167, 4499183, 4505064, 4503286, 4503288, 4509478, 4507435, 4507466,
				4512501, 4512509, 4516045, 4516058, 4522014, 4519978, 4520008, 4524149, 4525237, 4530717, 4534293,
				4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944, 4556807, 4561621, 4567514,
				4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4493509, 4495667, 4494441, 4497934, 4501835, 4505056, 4501371, 4503327, 4509479, 4505658,
				4507469, 4511553, 4512534, 4512578, 4522015, 4519338, 4520062, 4524148, 4523205, 4530715, 4534273,
				4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853, 4561608, 4567513,
				4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		Map<Integer, int[]> mapCVE_2019_0841 = new HashMap<>();
		mapCVE_2019_0841.put(15063, kbs15063);
		mapCVE_2019_0841.put(16299, kbs16299);
		mapCVE_2019_0841.put(17134, kbs17134);
		mapCVE_2019_0841.put(17763, kbs17763);
		CVES.add(CVE_2019_0841);
		CVES_TO_KBS.put(CVE_2019_0841, mapCVE_2019_0841);

		String CVE_2019_1064 = "CVE-2019-1064";
		kbs14393 = new int[] { 4503267, 4503294, 4509475, 4507459, 4507460, 4512495, 4512517, 4516044, 4516061, 4522010,
				4519998, 4524152, 4525236, 4530689 };
		kbs15063 = new int[] { 4503279, 4503289, 4509476, 4507450, 4507467, 4512474, 4512507, 4516059, 4516068, 4522011,
				4520010, 4524151, 4525245, 4530711, 4534296, 4537765, 4540705, 4550939, 4556804, 4561605, 4567516,
				4565499, 4571689, 4577021 };
		kbs16299 = new int[] { 4503284, 4503281, 4509477, 4507455, 4507465, 4512494, 4512516, 4516066, 4522012, 4520004,
				4520006, 4524150, 4525241, 4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330, 4554342,
				4550927, 4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4503286, 4503288, 4509478, 4507435, 4507466, 4512501, 4512509, 4516045, 4516058, 4522014,
				4519978, 4520008, 4524149, 4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333,
				4554349, 4550922, 4550944, 4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4503327, 4501371, 4509479, 4505658, 4507469, 4511553, 4512534, 4512578, 4522015, 4519338,
				4520062, 4524148, 4523205, 4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354,
				4549949, 4550969, 4551853, 4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		int[] kbs18362 = new int[] { 4503293, 4501375, 4505903, 4507453, 4512508, 4512941, 4515384, 4517211, 4522016,
				4517389, 4522355, 4524147, 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335,
				4551762, 4554364, 4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116,
				4574727, 4577062 };

		Map<Integer, int[]> mapCVE_2019_1064 = new HashMap<>();
		mapCVE_2019_1064.put(14393, kbs14393);
		mapCVE_2019_1064.put(15063, kbs15063);
		mapCVE_2019_1064.put(16299, kbs16299);
		mapCVE_2019_1064.put(17134, kbs17134);
		mapCVE_2019_1064.put(17763, kbs17763);
		mapCVE_2019_1064.put(18362, kbs18362);
		CVES.add(CVE_2019_1064);
		CVES_TO_KBS.put(CVE_2019_1064, mapCVE_2019_1064);

		String CVE_2019_1130 = "CVE-2019-1130";
		kbs10240 = new int[] { 4507458, 4512497, 4517276, 4522009, 4520011, 4524153, 4525232, 4530681, 4534306, 4537776,
				4540693, 4550930, 4556826, 4561649, 4567518, 4565513, 4571692, 4577049 };
		kbs14393 = new int[] { 4507460, 4507459, 4512495, 4512517, 4516044, 4516061, 4522010, 4519998, 4524152, 4525236,
				4530689 };
		kbs15063 = new int[] { 4507460, 4507459, 4512495, 4512517, 4516044, 4516061, 4522010, 4519998, 4524152, 4525236,
				4530689 };
		kbs16299 = new int[] { 4507455, 4507465, 4512494, 4512516, 4516066, 4522012, 4520004, 4520006, 4524150, 4525241,
				4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602,
				4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4507435, 4507466, 4512501, 4512509, 4516045, 4516058, 4522014, 4519978, 4520008, 4524149,
				4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944,
				4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4507469, 4505658, 4511553, 4512534, 4512578, 4522015, 4519338, 4520062, 4524148, 4523205,
				4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853,
				4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4507453, 4505903, 4512508, 4512941, 4515384, 4517211, 4522016, 4517389, 4522355, 4524147,
				4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951,
				4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2019_1130 = new HashMap<>();
		mapCVE_2019_1130.put(10240, kbs10240);
		mapCVE_2019_1130.put(14393, kbs14393);
		mapCVE_2019_1130.put(15063, kbs15063);
		mapCVE_2019_1130.put(16299, kbs16299);
		mapCVE_2019_1130.put(17134, kbs17134);
		mapCVE_2019_1130.put(17763, kbs17763);
		mapCVE_2019_1130.put(18362, kbs18362);
		CVES.add(CVE_2019_1130);
		CVES_TO_KBS.put(CVE_2019_1130, mapCVE_2019_1130);

		String CVE_2019_1253 = "CVE-2019-1253";
		kbs15063 = new int[] { 4516068, 4516059, 4522011, 4520010, 4524151, 4525245, 4530711, 4534296, 4537765, 4540705,
				4550939, 4556804, 4561605, 4567516, 4565499, 4571689, 4577021 };
		kbs16299 = new int[] { 4516066, 4522012, 4520004, 4520006, 4524150, 4525241, 4530714, 4534276, 4534318, 4537789,
				4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4516058, 4516045, 4522014, 4519978, 4520008, 4524149, 4525237, 4530717, 4534293, 4534308,
				4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944, 4556807, 4561621, 4567514, 4565489,
				4571709, 4577032 };
		kbs17763 = new int[] { 4512578, 4522015, 4519338, 4520062, 4524148, 4523205, 4530715, 4534273, 4534321, 4532691,
				4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853, 4561608, 4567513, 4558998, 4559003,
				4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4515384, 4517211, 4522016, 4517389, 4522355, 4524147, 4524570, 4530684, 4528760, 4532695,
				4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951, 4550945, 4556799, 4560960, 4567512,
				4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };

		Map<Integer, int[]> mapCVE_2019_1253 = new HashMap<>();
		mapCVE_2019_1253.put(15063, kbs15063);
		mapCVE_2019_1253.put(16299, kbs16299);
		mapCVE_2019_1253.put(17134, kbs17134);
		mapCVE_2019_1253.put(17763, kbs17763);
		mapCVE_2019_1253.put(18362, kbs18362);
		CVES.add(CVE_2019_1253);
		CVES_TO_KBS.put(CVE_2019_1253, mapCVE_2019_1253);

		String CVE_2019_1315 = "CVE-2019-1315";
		kbs10240 = new int[] { 4520011, 4525232, 4530681, 4534306, 4537776, 4540693, 4550930, 4556826, 4561649, 4567518,
				4565513, 4571692, 4577049 };
		kbs14393 = new int[] { 4519998, 4519979, 4525236, 4530689 };
		kbs15063 = new int[] { 4520010, 4525245, 4530711, 4534296, 4537765, 4540705, 4550939, 4556804, 4561605, 4567516,
				4565499, 4571689, 4577021 };
		kbs16299 = new int[] { 4520004, 4520006, 4525241, 4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330,
				4554342, 4550927, 4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4520008, 4519978, 4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333,
				4554349, 4550922, 4550944, 4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4519338, 4520062, 4523205, 4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331,
				4554354, 4549949, 4550969, 4551853, 4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333,
				4577069 };
		kbs18362 = new int[] { 4517389, 4522355, 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335,
				4551762, 4554364, 4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116,
				4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2019_1315 = new HashMap<>();
		mapCVE_2019_1315.put(10240, kbs10240);
		mapCVE_2019_1315.put(14393, kbs14393);
		mapCVE_2019_1315.put(15063, kbs15063);
		mapCVE_2019_1315.put(16299, kbs16299);
		mapCVE_2019_1315.put(17134, kbs17134);
		mapCVE_2019_1315.put(17763, kbs17763);
		mapCVE_2019_1315.put(18362, kbs18362);
		CVES.add(CVE_2019_1315);
		CVES_TO_KBS.put(CVE_2019_1315, mapCVE_2019_1315);

		String CVE_2019_1385 = "CVE-2019-1385";
		kbs16299 = new int[] { 4525241, 4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330, 4554342, 4550927,
				4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922,
				4550944, 4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4523205, 4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949,
				4550969, 4551853, 4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762, 4554364,
				4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		int[] kbs18363 = new int[] { 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762,
				4554364, 4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727,
				4577062 };
		Map<Integer, int[]> mapCVE_2019_1385 = new HashMap<>();
		mapCVE_2019_1385.put(16299, kbs16299);
		mapCVE_2019_1385.put(17134, kbs17134);
		mapCVE_2019_1385.put(17763, kbs17763);
		mapCVE_2019_1385.put(18362, kbs18362);
		mapCVE_2019_1385.put(18363, kbs18363);
		CVES.add(CVE_2019_1385);
		CVES_TO_KBS.put(CVE_2019_1385, mapCVE_2019_1385);

		String CVE_2019_1388 = "CVE-2019-1388";
		kbs10240 = new int[] { 4525232, 4530681, 4534306, 4537776, 4540693, 4550930, 4556826, 4561649, 4567518, 4565513,
				4571692, 4577049 };
		kbs14393 = new int[] { 4525236, 4530689 };
		kbs16299 = new int[] { 4525241, 4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330, 4554342, 4550927,
				4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922,
				4550944, 4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4523205, 4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949,
				4550969, 4551853, 4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762, 4554364,
				4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2019_1388 = new HashMap<>();
		mapCVE_2019_1388.put(10240, kbs10240);
		mapCVE_2019_1388.put(14393, kbs14393);
		mapCVE_2019_1388.put(15063, kbs15063);
		mapCVE_2019_1388.put(16299, kbs16299);
		mapCVE_2019_1388.put(17134, kbs17134);
		mapCVE_2019_1388.put(17763, kbs17763);
		mapCVE_2019_1388.put(18362, kbs18362);
		CVES.add(CVE_2019_1388);
		CVES_TO_KBS.put(CVE_2019_1388, mapCVE_2019_1388);

		String CVE_2019_1405 = "CVE-2019-1405";
		kbs10240 = new int[] { 4525232, 4530681, 4534306, 4537776, 4540693, 4550930, 4556826, 4561649, 4567518, 4565513,
				4571692, 4577049 };
		kbs14393 = new int[] { 4525236, 4530689 };
		kbs16299 = new int[] { 4525241, 4530714, 4534276, 4534318, 4537789, 4537816, 4540681, 4541330, 4554342, 4550927,
				4556812, 4561602, 4567515, 4565508, 4571741, 4577041 };
		kbs17134 = new int[] { 4525237, 4530717, 4534293, 4534308, 4537762, 4537795, 4540689, 4541333, 4554349, 4550922,
				4550944, 4556807, 4561621, 4567514, 4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4523205, 4530715, 4534273, 4534321, 4532691, 4537818, 4538461, 4541331, 4554354, 4549949,
				4550969, 4551853, 4561608, 4567513, 4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762, 4554364,
				4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		kbs18363 = new int[] { 4524570, 4530684, 4528760, 4532695, 4532693, 4535996, 4540673, 4541335, 4551762, 4554364,
				4549951, 4550945, 4556799, 4560960, 4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2019_1405 = new HashMap<>();
		mapCVE_2019_1405.put(10240, kbs10240);
		mapCVE_2019_1405.put(14393, kbs14393);
		mapCVE_2019_1405.put(15063, kbs15063);
		mapCVE_2019_1405.put(16299, kbs16299);
		mapCVE_2019_1405.put(17134, kbs17134);
		mapCVE_2019_1405.put(17763, kbs17763);
		mapCVE_2019_1405.put(18362, kbs18362);
		mapCVE_2019_1405.put(18363, kbs18363);
		CVES.add(CVE_2019_1405);
		CVES_TO_KBS.put(CVE_2019_1405, mapCVE_2019_1405);

		String CVE_2020_0668 = "CVE-2020-0668";
		kbs10240 = new int[] { 4537776, 4540693, 4550930, 4556826, 4561649, 4567518, 4565513, 4571692, 4577049 };
		kbs14393 = new int[] { 4537764, 4537806, 4540670, 4541329, 4550929, 4550947, 4556813, 4561616, 4567517, 4565511,
				4571694, 4577015 };
		kbs16299 = new int[] { 4537789, 4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602, 4567515, 4565508,
				4571741, 4577041 };
		kbs17134 = new int[] { 4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944, 4556807, 4561621, 4567514,
				4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4532691, 4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853, 4561608, 4567513,
				4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951, 4550945, 4556799, 4560960,
				4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		kbs18363 = new int[] { 4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951, 4550945, 4556799, 4560960,
				4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2020_0668 = new HashMap<>();
		mapCVE_2020_0668.put(10240, kbs10240);
		mapCVE_2020_0668.put(14393, kbs14393);
		mapCVE_2020_0668.put(15063, kbs15063);
		mapCVE_2020_0668.put(16299, kbs16299);
		mapCVE_2020_0668.put(17134, kbs17134);
		mapCVE_2020_0668.put(17763, kbs17763);
		mapCVE_2020_0668.put(18362, kbs18362);
		mapCVE_2020_0668.put(18363, kbs18363);
		CVES.add(CVE_2020_0668);
		CVES_TO_KBS.put(CVE_2020_0668, mapCVE_2020_0668);

		String CVE_2020_0683 = "CVE-2020-0683";
		kbs10240 = new int[] { 4537776, 4540693, 4550930, 4556826, 4561649, 4567518, 4565513, 4571692, 4577049 };
		kbs14393 = new int[] { 4537764, 4537806, 4540670, 4541329, 4550929, 4550947, 4556813, 4561616, 4567517, 4565511,
				4571694, 4577015 };
		kbs16299 = new int[] { 4537789, 4537816, 4540681, 4541330, 4554342, 4550927, 4556812, 4561602, 4567515, 4565508,
				4571741, 4577041 };
		kbs17134 = new int[] { 4537762, 4537795, 4540689, 4541333, 4554349, 4550922, 4550944, 4556807, 4561621, 4567514,
				4565489, 4571709, 4577032 };
		kbs17763 = new int[] { 4532691, 4537818, 4538461, 4541331, 4554354, 4549949, 4550969, 4551853, 4561608, 4567513,
				4558998, 4559003, 4565349, 4571748, 4570333, 4577069 };
		kbs18362 = new int[] { 4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951, 4550945, 4556799, 4560960,
				4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		kbs18363 = new int[] { 4532693, 4535996, 4540673, 4541335, 4551762, 4554364, 4549951, 4550945, 4556799, 4560960,
				4567512, 4565483, 4559004, 4565351, 4566116, 4574727, 4577062 };
		Map<Integer, int[]> mapCVE_2020_0683 = new HashMap<>();
		mapCVE_2020_0683.put(10240, kbs10240);
		mapCVE_2020_0683.put(14393, kbs14393);
		mapCVE_2020_0683.put(15063, kbs15063);
		mapCVE_2020_0683.put(16299, kbs16299);
		mapCVE_2020_0683.put(17134, kbs17134);
		mapCVE_2020_0683.put(17763, kbs17763);
		mapCVE_2020_0683.put(18362, kbs18362);
		mapCVE_2020_0683.put(18363, kbs18363);
		CVES.add(CVE_2020_0683);
		CVES_TO_KBS.put(CVE_2020_0683, mapCVE_2020_0683);

		String CVE_2020_0796 = "CVE-2020-0796";
		kbs18362 = new int[] { 4551762 };
		Map<Integer, int[]> mapCVE_2020_0796 = new HashMap<>();
		mapCVE_2020_0796.put(18362, kbs18362);
		mapCVE_2020_0796.put(18363, kbs18362);//Intentional, patch level is the same
		CVES.add(CVE_2020_0796);
		CVES_TO_KBS.put(CVE_2020_0796, mapCVE_2020_0796);
		
		String CVE_2020_1013 = "CVE-2020-1013";
		kbs10240 = new int[] { 4577049 };
		kbs14393 = new int[] { 4577015 };
		kbs16299 = new int[] { 4577041 };
		kbs17134 = new int[] { 4577032 };
		kbs17763 = new int[] { 4570333, 4577069 };
		kbs18362 = new int[] { 4574727, 4577062 };
		kbs18363 = new int[] { 4574727, 4577062 };
		int[] kbs19041 = new int[] { 4571756, 4577063 };
		Map<Integer, int[]> mapCVE_2020_1013 = new HashMap<>();
		mapCVE_2020_1013.put(10240, kbs10240);
		mapCVE_2020_1013.put(14393, kbs14393);
		mapCVE_2020_1013.put(15063, kbs15063);
		mapCVE_2020_1013.put(16299, kbs16299);
		mapCVE_2020_1013.put(17134, kbs17134);
		mapCVE_2020_1013.put(17763, kbs17763);
		mapCVE_2020_1013.put(18362, kbs18362);
		mapCVE_2020_1013.put(18363, kbs18363);
		mapCVE_2020_1013.put(19041, kbs19041);
		CVES.add(CVE_2020_1013);
		CVES_TO_KBS.put(CVE_2020_1013, mapCVE_2020_1013);
	}

	public static List<String> getApplicableCVEs(WindowsSystemInfoParser parser) {
		List<String> applicableCVEs = new ArrayList<>();
		for (String cve : CVES) {
			int[] kbs = CVES_TO_KBS.get(cve).get(parser.getBuildNumber());
			if (kbs != null) {// If null, there's no matching build number for this CVE
				for (String kb : parser.getHotfixes()) {
					int candidateKb = Integer.parseInt(kb.substring(2));
					boolean haveMatch = IntStream.of(kbs).anyMatch(x -> x == candidateKb);
					if (haveMatch) {
						applicableCVEs.add(cve);
					}
				}
			}
		}
		return applicableCVEs;
	}
}
